{"version":3,"sources":["types.js","components/Movie/Movie.jsx","components/MoviesList/MoviesList.jsx","img/Star_Wars_Logo.svg","components/SearchInput/SearchInput.jsx","api/helpers.js","components/StarshipsList/StarshipsList.jsx","components/PlanetsList/PlanetsList.jsx","components/MovieDetails/MovieDetails.jsx","App.js","index.js"],"names":["PropTypes","shape","director","string","isRequired","producer","pening_crawl","episode_id","number","model","manufacturer","url","name","terrain","climate","Movie","movie","handleShow","Col","Card","style","width","marginBottom","className","Body","Title","title","Text","opening_crawl","Button","onClick","variant","created","MoviesList","movies","Container","fluid","Row","map","SearchInput","value","onChange","Navbar","bg","expand","display","justifyContent","Form","inline","FormControl","type","placeholder","src","logo","defaultProps","getMovies","fetch","options","then","response","ok","Error","json","result","results","StarshipsList","starships","color","starship","PlanetsList","planets","planet","MovieDetails","show","handleClose","useState","setStarships","setPlanets","showPlanets","setShowPlanets","showStarships","setShowStarships","onHoverStarships","setHoverStarships","onHoverPlanets","setHoverPlanets","loadStarships","a","starshipsUrls","replace","Promise","all","newStarship","prev","loadPlanets","planetsUrls","newPlanet","handleOpenPlanets","handleOpenStarships","handleHover","e","preventDefault","target","handleLeave","useEffect","Modal","onHide","Header","closeButton","cursor","onMouseOver","onMouseLeave","Footer","App","setMovies","query","setQuery","appliedQuery","setAppliedQuery","modalShow","setModalShow","chosenMovie","setChosenMovie","moviesFromServer","moviesOnPage","useMemo","filter","includes","sort","movieOne","movieTwo","localeCompare","applyQuery","useCallback","f","delay","timerId","clearTimeout","args","setTimeout","debounce","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bf181be3.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\n\nexport const TypeMovie = PropTypes.shape({\n  director: PropTypes.string.isRequired,\n  producer: PropTypes.string.isRequired,\n  pening_crawl: PropTypes.string.isRequired,\n  episode_id: PropTypes.number.isRequired,\n});\n\nexport const TypeStarship = PropTypes.shape({\n  model: PropTypes.string.isRequired,\n  manufacturer: PropTypes.string.isRequired,\n  url: PropTypes.string.isRequired,\n})\n\nexport const TypePlanet = PropTypes.shape({\n  url: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  terrain: PropTypes.string.isRequired,\n  climate: PropTypes.string.isRequired,\n})\n","import React from 'react';\nimport {Col, Card, Button} from 'react-bootstrap';\nimport PropTypes from 'prop-types';\nimport {TypeMovie} from '../../types';\n\nexport const Movie = ({movie, handleShow}) => (\n  <Col>\n    <Card \n      style={{ width: '25rem', marginBottom: '25px'}}\n      className=\"MoviesList__item\" \n      key={movie.created}\n    >\n      <Card.Body>\n        <Card.Title>{movie.title}</Card.Title>\n        <Card.Text>{movie.opening_crawl}</Card.Text>\n        <Button onClick={() => handleShow(movie)} variant=\"primary\">Learn more</Button>\n      </Card.Body>\n      </Card>\n  </Col>\n)\n\nMovie.propTypes = {\n  movie: TypeMovie.isRequired,\n  handleShow: PropTypes.func.isRequired,\n}\n","import React from 'react';\nimport { Container, Row } from 'react-bootstrap';\nimport PropTypes from 'prop-types';\nimport {TypeMovie} from '../../types';\nimport {Movie} from '../Movie/Movie';\n\nexport const MoviesList = ({handleShow, movies}) => {\n  return (\n    <Container fluid className=\"MoviesList\">\n      <Row>\n        {movies.map(movie => (\n          <Movie \n            key={movie.episode_id} \n            movie={movie} \n            handleShow={handleShow}\n          />\n        ))}\n      </Row>\n    </Container>\n  )\n}\n\nMoviesList.propTypes = {\n  handleShow: PropTypes.func.isRequired,\n  movies: PropTypes.arrayOf(TypeMovie.isRequired).isRequired,\n}","export default __webpack_public_path__ + \"static/media/Star_Wars_Logo.dba53346.svg\";","import React from 'react';\nimport { Navbar, Form, FormControl } from 'react-bootstrap';\nimport PropTypes from 'prop-types';\nimport logo from '../../img/Star_Wars_Logo.svg';\n\nexport const SearchInput = ({value, onChange}) => (\n  <Navbar \n\n    bg=\"light\" \n    expand=\"lg\" \n    style={{\n      marginBottom: \"24px\", \n      display: 'flexbox', \n      justifyContent: 'space-around'\n    }}\n  >\n    <Form inline>\n      <FormControl \n        type=\"text\"\n        value={value}\n        placeholder=\"Search a movie...\"\n        onChange={onChange}\n        placeholder=\"Search\" \n        className=\"mr-sm-2\" \n      />\n    </Form>\n    <img src={logo} width=\"100px\"/>\n  </Navbar>\n);\n\nSearchInput.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func.isRequired,\n}\n\nSearchInput.defaultProps = {\n  value: '',\n}","export const BASE_URL = 'https://swapi.dev/api/';\n\nexport const request = (url, options) => fetch(`${BASE_URL}${url}`, options)\n  .then((response) => {\n    if (!response.ok) {\n      throw new Error ('no response');\n    }\n\n    return response.json();\n  })\n  .then(result => result.results);\n\nexport const getMovies = () => request('films/');","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {TypeStarship} from '../../types';\n\n\nexport const StarshipsList = ({starships}) => (\n  <ul\n    style={{color: \"black\"}}\n  >\n    {starships.map(starship => {\n      return (\n        <li key={starship.url}>\n          {starship.model} by {starship.manufacturer}\n        </li>\n      )\n    })}\n  </ul>\n)\n\nStarshipsList.propTypes = {\n  starships: PropTypes.arrayOf(TypeStarship.isRequired).isRequired,\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {TypePlanet} from '../../types';\n\nexport const PlanetsList = ({planets}) => (\n  <ul style={{color: \"black\"}}>\n    {planets.map(planet => {\n      return (\n        <li key={planet.url}>\n          Planet {planet.name}\n          <br />\n          {planet.terrain} terrain; {planet.climate} climate\n        </li>\n      )\n    })}\n  </ul>\n);\n\nPlanetsList.propTypes = {\n  planets: PropTypes.arrayOf(TypePlanet.isRequired).isRequired,\n}\n","import React, {useState, useEffect} from 'react';\nimport Modal from 'react-bootstrap/Modal';\nimport {Button} from 'react-bootstrap';\nimport { StarshipsList } from '../StarshipsList/StarshipsList';\nimport {PlanetsList} from '../PlanetsList/PlanetsList';\nimport PropTypes from 'prop-types';\nimport {TypeMovie} from '../../types';\n\nexport const MovieDetails = ({show, movie, handleClose}) => {\n  const [starships, setStarships] = useState([]);\n  const [planets, setPlanets] = useState([]);\n  const [showPlanets, setShowPlanets] = useState(false);\n  const [showStarships, setShowStarships] = useState(false);\n  const [onHoverStarships, setHoverStarships] = useState(false);\n  const [onHoverPlanets, setHoverPlanets] = useState(false);\n\n  const loadStarships = async () => {\n    const starshipsUrls = movie.starships.map(starship => starship.replace('http', 'https'));\n\n    Promise.all(starshipsUrls.map(starship =>\n      fetch(starship)\n        .then(response => response.json())\n          .then(newStarship => setStarships(prev => [...prev, newStarship]))))\n  }\n\n  const loadPlanets = async () => {\n    const planetsUrls = movie.planets.map(planet => planet.replace('http', 'https'));\n    Promise.all(planetsUrls.map(planet =>\n      fetch(planet)\n        .then(response => response.json())\n          .then(newPlanet => setPlanets(prev => [...prev, newPlanet]))))\n   }\n\n   const handleOpenPlanets = () => {\n    setShowPlanets(prev => !prev);\n  }\n\n   const handleOpenStarships = () => {\n    setShowStarships(prev => !prev);\n   }\n\n   const handleHover = (e) => {\n    e.preventDefault();\n     const element = e.target;\n\n     switch (element.className) {\n       case (\"Starships\") :\n         setHoverStarships(true);\n         return onHoverStarships\n        case (\"Planets\") :\n          setHoverPlanets(true);\n          return onHoverPlanets;\n        default :\n          setHoverStarships(false);\n          setHoverPlanets(false);\n          return;\n     }\n   }\n\n   const handleLeave = (e) => {\n     e.preventDefault();\n    const element = e.target;\n\n    switch (element.className) {\n      case (\"Starships\") :\n        setHoverStarships(false);\n        return onHoverStarships\n       case (\"Planets\") :\n         setHoverPlanets(false);\n         return onHoverPlanets;\n       default :\n         setHoverStarships(false);\n         setHoverPlanets(false);\n         return;\n    }\n  }\n\nuseEffect(() => {\n  loadStarships();\n  loadPlanets();\n}, [movie.episode_id]);\n\n  return (\n    <Modal \n      show={show} \n      className=\"MovieDetails\" \n      onHide={handleClose}\n    >\n      <Modal.Header closeButton className=\"MovieDetails__header\">\n        <Modal.Title className=\"title\">\n          {movie.title}\n        </Modal.Title>\n      </Modal.Header>\n\n      <Modal.Body className=\"MovieDetails__body\">\n        <div className=\"MovieDetails__creators\">\n          <h6>Director:</h6>\n          <p>{movie.director}</p>\n\n          <h6>Producers: </h6>\n          <p>{movie.producer}</p>\n        </div>\n        <div className=\"MovieDetails__plot\">\n          <h6>Opening Crawl:</h6>\n          <p>{movie.opening_crawl}</p>\n        </div>\n        <ul className=\"MovieDetails__list\">\n          {onHoverStarships\n          ? (<li\n              style={{color: \"blue\", cursor: \"pointer\"}}\n              className=\"Starships\"\n              onClick={handleOpenStarships}\n              onMouseOver={(e) => handleHover(e)}\n              onMouseLeave ={(e) => handleLeave(e)}\n            >Starships\n            {showStarships && (\n              <StarshipsList \n                starships={starships}\n              />\n              )}</li>)\n          : (<li\n                style={{color: \"black\"}}\n                className=\"Starships\"\n                onClick={handleOpenStarships}\n                onMouseOver={(e) => handleHover(e)}\n                onMouseLeave ={(e) => handleLeave(e)}\n              >Starships\n              {showStarships && (\n                <StarshipsList \n                  starships={starships}\n                />\n              )}\n            </li>)\n          }\n          {onHoverPlanets\n          ? (<li\n              style={{color: \"blue\", cursor: \"pointer\"}}\n              className=\"Planets\"\n              onClick={handleOpenPlanets}\n              onMouseOver={(e) => handleHover(e)}\n              onMouseLeave ={(e) => handleLeave(e)}\n            >\n              Planets\n              {showPlanets && (<PlanetsList planets={planets}/>)}\n            </li>)\n          : (<li\n                className=\"Planets\"\n                onClick={handleOpenPlanets}\n                onMouseOver={(e) => handleHover(e)}\n                onMouseLeave ={(e) => handleLeave(e)}\n              >\n                Planets\n                {showPlanets && (<PlanetsList planets={planets}/>)}\n            </li>\n            )\n          }\n        </ul>\n      </Modal.Body>\n\n      <Modal.Footer>\n        <Button variant=\"secondary\" onClick={handleClose}>Close</Button>\n      </Modal.Footer>\n    </Modal>\n  )\n}\n\nMovieDetails.propTypes = {\n  show: PropTypes.bool.isRequired,\n  movie: TypeMovie.isRequired,\n  handleClose: PropTypes.func.isRequired,\n}","import './App.css';\nimport React, {useState, useEffect, useMemo, useCallback} from 'react';\nimport { MoviesList } from './components/MoviesList/MoviesList';\nimport {SearchInput } from './components/SearchInput/SearchInput';\nimport { getMovies } from './api/helpers';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport { Container } from 'react-bootstrap';\nimport { MovieDetails } from './components/MovieDetails/MovieDetails';\n\nfunction App() {\n  const [movies, setMovies] = useState([]);\n  const [query, setQuery] = useState('');\n  const [appliedQuery, setAppliedQuery] = useState('');\n  const [modalShow, setModalShow] = useState(false);\n  const [chosenMovie, setChosenMovie] = useState({});\n\n  useEffect(() => {\n    getMovies()\n      .then(moviesFromServer => {\n        setMovies(moviesFromServer);\n      })\n  }, []);\n\n  const moviesOnPage = useMemo(() => {\n    if (appliedQuery) {\n      let filteredMovies = movies.filter(movie => {\n        return movie.title.includes(appliedQuery) || movie[\"opening_crawl\"].includes(appliedQuery);\n      });\n\n      return filteredMovies.sort((movieOne, movieTwo) => movieOne.title.localeCompare(movieTwo.title));\n    }\n\n    return [...movies].sort((movieOne, movieTwo) => movieOne.title.localeCompare(movieTwo.title));\n  }, [appliedQuery, movies]);\n\n  const onChange = (e) => {\n    setQuery(e.target.value);\n    applyQuery(e.target.value);\n  }\n\n  const debounce = (f, delay) => {\n    let timerId;\n    return (...args) => {\n      clearTimeout(timerId);\n      timerId = setTimeout(f, delay, ...args);\n    }\n  }\n\n  const applyQuery = useCallback(\n    debounce(setAppliedQuery, 1000),\n    []\n  )\n\n  const handleShow = (movie) => {\n    setChosenMovie(movie);\n    setModalShow(true);\n  }\n\n  const handleClose = () => {\n    setChosenMovie({});\n    setModalShow(false);\n  }\n\n  return (\n    <>\n      {modalShow && <MovieDetails \n        show={modalShow} \n        handleClose={handleClose} \n        movie={chosenMovie}\n      />}\n        <header>\n          <SearchInput \n            value={query}\n            onChange={onChange}\n          />\n        </header>\n\n        <Container className=\"App\">\n        <main>\n          <MoviesList \n            handleShow={handleShow}\n            movies={moviesOnPage}\n          />\n        </main>\n      </Container>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}